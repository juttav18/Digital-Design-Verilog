module alu_4bit (
    input [3:0] A,         // 4-bit input A
    input [3:0] B,         // 4-bit input B
    input [2:0] ALU_Sel,   // 3-bit control signal to select ALU operation
    output reg [3:0] ALU_Out, // 4-bit ALU result
    output reg Carry_Out   // Carry-out flag
);

    always @(*) begin
        case(ALU_Sel)
            3'b000: {Carry_Out, ALU_Out} = A + B;        // ADD
            3'b001: {Carry_Out, ALU_Out} = A - B;        // SUBTRACT
            3'b010: ALU_Out = A & B;                     // AND
            3'b011: ALU_Out = A | B;                     // OR
            3'b100: ALU_Out = A ^ B;                     // XOR
            3'b101: ALU_Out = ~(A & B);                  // NAND
            3'b110: ALU_Out = ~(A | B);                  // NOR
            3'b111: ALU_Out = ~(A ^ B);                  // XNOR
            default: ALU_Out = 4'b0000;                  // Default case
        endcase
    end

endmodule
