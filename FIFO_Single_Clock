module FIFO(
    input clk, w_en, rd_en, rst,
    input [7:0] buff_in,
    output reg [7:0] buff_out,
    output reg [6:0] counter,
    output buff_full, buff_empty
);

    reg [7:0] mem[63:0];
    reg [5:0] rd_ptr, wrt_ptr;

    assign buff_full = (counter == 64);
    assign buff_empty = (counter == 0);

    always @(posedge clk or posedge rst) begin
        if (rst)
            counter <= 0;
        else if (w_en && !buff_full && !(rd_en && !buff_empty))
            counter <= counter + 1;
        else if (rd_en && !buff_empty && !(w_en && !buff_full))
            counter <= counter - 1;
    end

    always @(posedge clk or posedge rst) begin
        if (rst)
            buff_out <= 0;
        else if (rd_en && !buff_empty)
            buff_out <= mem[rd_ptr];
    end

    always @(posedge clk) begin
        if (w_en && !buff_full)
            mem[wrt_ptr] <= buff_in;
    end

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            wrt_ptr <= 0;
            rd_ptr <= 0;
        end else begin
            if (w_en && !buff_full)
                wrt_ptr <= wrt_ptr + 1;
            if (rd_en && !buff_empty)
                rd_ptr <= rd_ptr + 1;
        end
    end

endmodule
