module top_module (
    input inp, clk, rst,
    output reg det
);
    parameter s0=3'b000, s1=3'b001, s2=3'b010, s3=3'b011, s4=3'b100;
    
    reg [2:0] prst_state, nxt_state;
    
    always @(posedge clk or posedge rst) begin
        if (rst) 
            prst_state <= s0;
        else 
            prst_state <= nxt_state;
    end
    
    always @(prst_state, inp) begin
        case (prst_state)
            s0: if (inp) nxt_state = s1; else nxt_state = s0;
            s1: if (inp) nxt_state = s2; else nxt_state = s0;
            s2: if (inp) nxt_state = s2; else nxt_state = s3;
            s3: if (inp) nxt_state = s4; else nxt_state = s2;
            s4: if (inp) nxt_state = s1; else nxt_state = s0;
            default: nxt_state = s0;
        endcase
    end
    
    always @(prst_state, inp) begin
        case (prst_state)
            s0: det = 0;
            s1: det = 0;
            s2: det = 0;
            s3: det = 0;
            s4: det = (inp) ? 1 : 0;
            default: det = 0;
        endcase
    end
    
endmodule
